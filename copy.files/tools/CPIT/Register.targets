<Project  ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<!-- This simple inline task displays "Hello, world!" -->
	<PropertyGroup>
		<ServiceUrl></ServiceUrl>
		<ProjectName></ProjectName>
		<ReleaseName></ReleaseName>
		<PackageFullNameList></PackageFullNameList>
		<SvnLinkList></SvnLinkList>
		<VersionList></VersionList>
		<VerNotesList></VerNotesList>
	</PropertyGroup>

	<UsingTask TaskName="RegisterPackage" TaskFactory="CodeTaskFactory" AssemblyFile="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
		<ParameterGroup>
			<ServiceUrl ParameterType="System.String" Required="true" />
			<ProjectName ParameterType="System.String" Required="true" />
			<ReleaseName ParameterType="System.String" Required="true" />
			<PackageFullNameList ParameterType="System.String" Required="true" />
			<SvnLinkList ParameterType="System.String" Required="true" />
			<VersionList ParameterType="System.String" Required="true" />
			<VerNotesList ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Microsoft.Build.Framework.dll"/>
			<Reference Include="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Microsoft.Build.Utilities.v4.0.dll"/>
			<Reference Include="System.Net"/>
			<Reference Include="System.Xml"/>
			<Using Namespace="Microsoft.Build.Framework" />
			<Using Namespace="Microsoft.Build.Utilities" />
			<Using Namespace="System"/>
			<Using Namespace="System.IO"/>
			<Using Namespace="System.Net"/>
			<Using Namespace="System.Text"/>
			<Using Namespace="System.Xml"/>
			<Code Type="Class" Language="cs">
				<![CDATA[
					using System;
					using System.Text;
					using System.Net;
					using System.IO;
					using System.Xml;

					public class RegisterPackage : Microsoft.Build.Utilities.Task
					{
						private string _serviceUrl;
						private string _projectId;
						private string _projectName;
						private string _releaseName;
						private string _packageFullNameList;
						private string _svnLinkList;
						private string _versionList;
						private string _verNotesList;

						[Microsoft.Build.Framework.Required]
						public string ServiceUrl
						{
							get
							{
								return _serviceUrl;
							}
							set
							{
								_serviceUrl = value;
							}
						}

						[Microsoft.Build.Framework.Required]
						public string ProjectName
						{
							get
							{
								return _projectName;
							}
							set
							{
								_projectName = value;
							}
						}

						[Microsoft.Build.Framework.Required]
						public string ReleaseName
						{
							get
							{
								return _releaseName;
							}
							set
							{
								_releaseName = value;
							}
						}

						[Microsoft.Build.Framework.Required]
						public string PackageFullNameList
						{
							get
							{
								return _packageFullNameList;
							}
							set
							{
								_packageFullNameList = value;
							}
						}

						[Microsoft.Build.Framework.Required]
						public string SvnLinkList
						{
							get
							{
								return _svnLinkList;
							}
							set
							{
								_svnLinkList = value;
							}
						}

						[Microsoft.Build.Framework.Required]
						public string VersionList
						{
							get
							{
								return _versionList;
							}
							set
							{
								_versionList = value;
							}
						}

						[Microsoft.Build.Framework.Required]
						public string VerNotesList
						{
							get
							{
								return _verNotesList;
							}
							set
							{
								_verNotesList = value;
							}
						}

						public override bool Execute()
						{
							_projectId = GetProjectId();
							Log.LogMessage(_projectId);

							AddTPM();
							AddRelease();

							return true;
						}

						private string GetProjectId()
						{
							Log.LogMessage("GetProjectId");
							Log.LogMessage("===========================================================================");
							Log.LogMessage("ServiceUrl: " + _serviceUrl);
							Log.LogMessage("ProjectName: " + _projectName);

							WebRequest webRequest = WebRequest.Create(_serviceUrl);
							HttpWebRequest httpRequest = (HttpWebRequest)webRequest;
							httpRequest.Method = "POST";
							httpRequest.ContentType = "text/xml; charset=utf-8";

							httpRequest.Headers.Add("SOAPAction: http://deploymentmanagement.com/IDMService/GetProject");

							httpRequest.ProtocolVersion = HttpVersion.Version11;
							httpRequest.Credentials = CredentialCache.DefaultCredentials;
							Stream requestStream = httpRequest.GetRequestStream();
							//Create Stream and Complete Request
							StreamWriter streamWriter = new StreamWriter(requestStream, Encoding.ASCII);

							string msg =
								"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dep=\"http://deploymentmanagement.com\">"
								+ "<soapenv:Header/>"
								+ "<soapenv:Body>"
									+ "<dep:GetProject>"
										+ "<dep:projectName>" + _projectName + "</dep:projectName>"
									+ "</dep:GetProject>"
								+ "</soapenv:Body>"
								+ "</soapenv:Envelope>";

							StringBuilder soapRequest = new StringBuilder(msg);

							streamWriter.Write(soapRequest.ToString());
							streamWriter.Close();
							//Get the Response    
							HttpWebResponse wr = (HttpWebResponse)httpRequest.GetResponse();
							StreamReader srd = new StreamReader(wr.GetResponseStream());
							string resulXmlFromWebService = srd.ReadToEnd();

							XmlDocument xDoc = new XmlDocument();
							xDoc.LoadXml(resulXmlFromWebService);

							XmlNamespaceManager nsmgr = new XmlNamespaceManager(xDoc.NameTable);
							//nsmgr.AddNamespace("r", "http://deploymentmanagement.com");
							nsmgr.AddNamespace("s", "http://schemas.xmlsoap.org/soap/envelope/");
							nsmgr.AddNamespace("a", "http://schemas.datacontract.org/2004/07/DeploymentManagement.TO");
							nsmgr.AddNamespace("i", "http://www.w3.org/2001/XMLSchema-instance");
							nsmgr.AddNamespace("b", "http://schemas.datacontract.org/2004/07/System.Data.Linq");

							XmlNode nId = (xDoc.SelectSingleNode("s:Envelope/s:Body", nsmgr)).ChildNodes[0].ChildNodes[0].SelectSingleNode("a:Id", nsmgr);
							return nId.InnerText;
						}

						private bool AddTPM()
						{
							Log.LogMessage("AddTPM");
							Log.LogMessage("===========================================================================");
							Log.LogMessage("ServiceUrl: " + _serviceUrl);
							Log.LogMessage("ProjectId: " + _projectId);
							Log.LogMessage("PackageFullName: " + _packageFullNameList);
							Log.LogMessage("SvnLink: " + _svnLinkList);
							Log.LogMessage("Version: " + _versionList);
							Log.LogMessage("VerNotes: " + _verNotesList);

							string[] packageVersions = _packageFullNameList.Split(new char[] {'|'}, StringSplitOptions.RemoveEmptyEntries);
							string[] svnLinks = _svnLinkList.Split(new char[] {'|'}, StringSplitOptions.RemoveEmptyEntries);
							string[] versions = _versionList.Split(new char[] {'|'}, StringSplitOptions.RemoveEmptyEntries);
							string[] verNotes = _verNotesList.Split(new char[] {'|'}, StringSplitOptions.RemoveEmptyEntries);

							for (int i = 0; i < packageVersions.Length; i++)
							{
								WebRequest webRequest = WebRequest.Create(_serviceUrl);
								HttpWebRequest httpRequest = (HttpWebRequest)webRequest;
								httpRequest.Method = "POST";
								httpRequest.ContentType = "text/xml; charset=utf-8";

								httpRequest.Headers.Add("SOAPAction: http://deploymentmanagement.com/IDMService/AddTpm");

								httpRequest.ProtocolVersion = HttpVersion.Version11;
								httpRequest.Credentials = CredentialCache.DefaultCredentials;
								Stream requestStream = httpRequest.GetRequestStream();
								//Create Stream and Complete Request
								StreamWriter streamWriter = new StreamWriter(requestStream, Encoding.ASCII);

								string msg =
								"<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">"
								 + "<s:Body>"
								   + "<AddTpm xmlns=\"http://deploymentmanagement.com\">"
									 + "<packageVersion xmlns:d4p1=\"http://schemas.datacontract.org/2004/07/DeploymentManagement.TO\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">"
									   + "<d4p1:Children />"
									   + "<d4p1:DeployedTo />"
									   + "<d4p1:FileDate i:nil=\"true\" />"
									   + "<d4p1:FileId>0</d4p1:FileId>"
									   + "<d4p1:InstallationOrder i:nil=\"true\" />"
									   + "<d4p1:IsContainsMsi i:nil=\"true\" />"
									   + "<d4p1:IsRebootServer i:nil=\"true\" />"
									   + "<d4p1:MD5 i:nil=\"true\" />"
									   + "<d4p1:PackageFullName>" + packageVersions[i] + "</d4p1:PackageFullName>"
									   + "<d4p1:PackageId >1111</d4p1:PackageId>"
									   + "<d4p1:ParentFileFullName i:nil=\"true\" />"
									   + "<d4p1:ParentFileId i:nil=\"true\" />"
									   + "<d4p1:ParentVerId>0</d4p1:ParentVerId>"
									   + "<d4p1:ProjectId >" + _projectId + "</d4p1:ProjectId>"
									   + "<d4p1:Revision i:nil=\"true\" />"
									   + "<d4p1:ShortName i:nil=\"true\" />"
									   + "<d4p1:SvnLink >" + svnLinks[i] + "</d4p1:SvnLink>"
									   + "<d4p1:Type>SPT</d4p1:Type>"
									   + "<d4p1:UserId i:nil=\"true\" />"
									   + "<d4p1:UserName i:nil=\"true\" />"
									   + "<d4p1:VerId>0</d4p1:VerId>"
									   + "<d4p1:VerNotes>" + verNotes[i] + "</d4p1:VerNotes>"
									   + "<d4p1:Version >" + versions[i] + "</d4p1:Version>"
									 + "</packageVersion>"
								   + "</AddTpm>"
								 + "</s:Body>"
								+ "</s:Envelope>";

								StringBuilder soapRequest = new StringBuilder(msg);

								streamWriter.Write(soapRequest.ToString());
								streamWriter.Close();
								//Get the Response    
								HttpWebResponse wr = (HttpWebResponse)httpRequest.GetResponse();
								StreamReader srd = new StreamReader(wr.GetResponseStream());
								string resulXmlFromWebService = srd.ReadToEnd();
							}

							return true;
						}

						private bool AddRelease()
						{
							Log.LogMessage("AddRelease");
							Log.LogMessage("===========================================================================");
							Log.LogMessage("ServiceUrl: " + ServiceUrl);
							Log.LogMessage("ProjectId: " + ProjectName);
							Log.LogMessage("PackageFullName: " + ReleaseName);
							Log.LogMessage("SvnLink: " + _svnLinkList);
							
							string[] packageVersions = _packageFullNameList.Split(new char[] {'|'}, StringSplitOptions.RemoveEmptyEntries);
							string[] svnLinks = _svnLinkList.Split(new char[] {'|'}, StringSplitOptions.RemoveEmptyEntries);
							string[] versions = _versionList.Split(new char[] {'|'}, StringSplitOptions.RemoveEmptyEntries);
							string[] verNotes = _verNotesList.Split(new char[] {'|'}, StringSplitOptions.RemoveEmptyEntries);

							for (int i = 0; i < packageVersions.Length; i++)
							{
								WebRequest webRequest = WebRequest.Create(ServiceUrl);
								HttpWebRequest httpRequest = (HttpWebRequest)webRequest;
								httpRequest.Method = "POST";
								httpRequest.ContentType = "text/xml; charset=utf-8";

								httpRequest.Headers.Add("SOAPAction: http://deploymentmanagement.com/IDMService/AddRelease");

								httpRequest.ProtocolVersion = HttpVersion.Version11;
								httpRequest.Credentials = CredentialCache.DefaultCredentials;
								Stream requestStream = httpRequest.GetRequestStream();
								//Create Stream and Complete Request
								StreamWriter streamWriter = new StreamWriter(requestStream, Encoding.ASCII);

								string msg =
									"<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">"
										+ "<s:Body>"
											+ "<AddRelease xmlns=\"http://deploymentmanagement.com\">"
												+ "<release xmlns:d4p1=\"http://schemas.datacontract.org/2004/07/DeploymentManagement.TO\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">"
													+ "<d4p1:Content>"
														+ "<d4p1:PackageVersion>"
															+ "<d4p1:Children />"
															+ "<d4p1:DeployedTo />"
															+ "<d4p1:FileDate i:nil=\"true\" />"
															+ "<d4p1:FileId>0</d4p1:FileId>"
															+ "<d4p1:InstallationOrder i:nil=\"true\" />"
															+ "<d4p1:IsContainsMsi i:nil=\"true\" />"
															+ "<d4p1:IsRebootServer i:nil=\"true\" />"
															+ "<d4p1:MD5 i:nil=\"true\" />"
															+ "<d4p1:PackageFullName i:nil=\"true\" />"
															+ "<d4p1:PackageId i:nil=\"true\" />"
															+ "<d4p1:ParentFileFullName i:nil=\"true\" />"
															+ "<d4p1:ParentFileId i:nil=\"true\" />"
															+ "<d4p1:ParentVerId>0</d4p1:ParentVerId>"
															+ "<d4p1:ProjectId i:nil=\"true\" />"
															+ "<d4p1:Revision i:nil=\"true\" />"
															+ "<d4p1:ShortName i:nil=\"true\" />"
															+ "<d4p1:SvnLink>" + svnLinks[i] + "</d4p1:SvnLink>"
															+ "<d4p1:Type>SPT</d4p1:Type>"
															+ "<d4p1:UserId i:nil=\"true\" />"
															+ "<d4p1:UserName i:nil=\"true\" />"
															+ "<d4p1:VerId>0</d4p1:VerId>"
															+ "<d4p1:VerNotes i:nil=\"true\" />"
															+ "<d4p1:Version i:nil=\"true\" />"
														+ "</d4p1:PackageVersion>"
													+ "</d4p1:Content>"
													+ "<d4p1:Date i:nil=\"true\" />"
													+ "<d4p1:Id i:nil=\"true\" />"
													+ "<d4p1:Name>" + _releaseName + "</d4p1:Name>"
													+ "<d4p1:ProjectId>" + _projectId + "</d4p1:ProjectId>"
													+ "<d4p1:ProjectName i:nil=\"true\" />"
													+ "<d4p1:ShortName i:nil=\"true\" />"
													+ "<d4p1:Version i:nil=\"true\" />"
												+ "</release>"
											+ "</AddRelease>"
										+ "</s:Body>"
									+ "</s:Envelope>";

								StringBuilder soapRequest = new StringBuilder(msg);

								streamWriter.Write(soapRequest.ToString());
								streamWriter.Close();
								//Get the Response    
								HttpWebResponse wr = (HttpWebResponse)httpRequest.GetResponse();
								StreamReader srd = new StreamReader(wr.GetResponseStream());
								string resulXmlFromWebService = srd.ReadToEnd();
							}

							return true;
						}
					}
				]]>
			</Code>
		</Task>
	</UsingTask>
</Project>